#!/usr/bin/env python
# -"- coding: utf-8 -"-

from argparse import ArgumentParser
from tempfile import NamedTemporaryFile
import re
import os
import subprocess
import sys
import socket

# TODO: allow .qsubmitrc to override this
LOCATIONS = {
    'bwlf': {
        'engine': 'grun',
        'hostname': r'(bwlf.*|jove|amaterasu|osiris)',
    },
    'robotarium': {
        'engine': 'slurm',
        'hostname': r'.*cm\.cluster',
    },
    'ufal': {
        'engine': 'sge',
        'hostname': r'.*ms\.mff\.cuni\.cz',
    },
}


ENGINES = {
    'sge': {
        'submit_cmd': 'qsub -cwd -j y -o <LOGDIR><NAME>.o$JOB_ID',
        'params': {
            'name': '-N <NAME>',
            'mem': '-l mem_free=<MEM>,act_mem_free=<MEM>,h_vmem=<MEM>',
            'cpus': '-pe smp <CPUS>',
            'queue': '-q <QUEUE>',
            'hold': '-hold_jid <HOLD>',
            'gpus': '-l gpu=<GPUS>,gpu_ram=<GPU_MEM>',
        },
        'script': {
            'print_info': 'qstat -j <JOB_ID>',
            'resource_cmd': 'qstat -j $JOB_ID | grep -e "^hard resource_list" | cut -d " " -f 11-; echo NSLOTS=$NSLOTS',
            'info_cmd': 'echo "NOT IMPLEMENTED"',
            'maxvmem_cmd': 'qstat -j $JOB_ID | grep -e "^usage" | cut -f 5 -d, | cut -d = -f 2',
            'usage_cmd': 'qstat -j $JOB_ID | grep "^usage" | cut -b 29-',
            'load_profile_cmd': '[ -e /net/projects/SGE/user/sge_profile ] && . /net/projects/SGE/user/sge_profile',
        }
    },
    'grun': {
        'submit_cmd': 'grun -oe <LOGDIR><NAME>.o%j -nowait',
        'script_prepend': '/bin/bash',
        'params': {
            'name': '-j <NAME>',
            'mem': '--mem=<MEM>',
            'cpus': '-c <CPUS>',
            'hold': '-hold_jid <HOLD>',
        },
        'script': {
            'print_info': 'echo "NOT IMPLEMENTED"',
            'resource_cmd': 'echo "NOT IMPLEMENTED"',
            'info_cmd': 'echo "NOT IMPLEMENTED"',
            'maxvmem_cmd': 'echo "NOT IMPLEMENTED"',
            'usage_cmd': 'echo "NOT IMPLEMENTED"',
            'load_profile_cmd': '',
        }
    },
    'slurm': {
        'submit_cmd': 'sbatch -o <LOGDIR><NAME>.o%j',
        'params': {
            'name': '-J <NAME>',
            'mem': '--mem=<MEM>',
            'cpus': '-c <CPUS>',
            'queue': '-p <QUEUE>',
            'hold': '-d afterany:<HOLD>',
        },
        'script': {
            'print_info': 'echo "NOT IMPLEMENTED"',
            'resource_cmd': 'echo "NOT IMPLEMENTED"',
            'info_cmd': 'echo "NOT IMPLEMENTED"',
            'maxvmem_cmd': 'echo "NOT IMPLEMENTED"',
            'usage_cmd': 'echo "NOT IMPLEMENTED"',
            'load_profile_cmd': '',
        }
    },
    'console': {
        'submit_cmd': 'bash',
        'params': {},
        'script': {
            'print_info': 'echo "NOT IMPLEMENTED"',
            'resource_cmd': 'echo "NOT IMPLEMENTED"',
            'info_cmd': 'echo "NOT IMPLEMENTED"',
            'maxvmem_cmd': 'echo "NOT IMPLEMENTED"',
            'usage_cmd': 'echo "NOT IMPLEMENTED"',
            'load_profile_cmd': '',
        }
    }
}


SCRIPT_TEMPLATE = '''#!/bin/bash

sdate=`date`  # start date

# load UFAL SGE profile, if exists
<LOAD_PROFILE_CMD>

hard=$(<RESOURCE_CMD>)

echo "=============================="
echo "== Server:    "`hostname`
echo "== Directory: "`pwd`
echo '== Command:   <MAIN_CMD_ESC>'
echo "== Hard res:  $hard"
echo "== Started:   $sdate"
echo "== Sourcing:  $HOME/.bashrc"
echo "=============================="

# Source the bashrc
. $HOME/.bashrc

# Renice ourselves
renice 10 $$

echo "=============================="

# Run the command and collect exit status
<MAIN_CMD>
exitstatus=$?

if [ 0 != "$exitstatus" ]; then
  exitinfo="FAILED (exit status $exitstatus)"
fi

echo "=============================="

fdate=`date`

# remove this temporary script
rm <SCRIPT_TMPFILE>

# print all we know about ourselves
echo "Batch job information:"
<INFO_CMD>

echo "Getting usage and peak mem info (works for SGE, not PBS yet)..."
usage=$(<USAGE_CMD>)
maxvmem=$(<MAXVMEM_CMD>)

duration=$SECONDS
duration=$((duration / 3600)):`printf '%02d' $(((duration / 60) % 60))`:`printf '%02d' $((duration % 60))`

echo "=============================="
echo "== Server:    "`hostname`
echo "== Directory: "`pwd`
echo '== Command:   <MAIN_CMD_ESC>'
echo "== Usage:     $usage"
echo "== Peak mem:  $maxvmem"
echo "== Started:   $sdate"
echo "== Finished:  $fdate     $exitinfo"
echo "== Duration:  $duration"
echo "=============================="
'''


def detect_location():
    """Check for hostname patterns, if they correspond to any of the preset locations."""
    hostname = socket.getfqdn()
    for loc, params in LOCATIONS.items():
        if re.search(params['hostname'], hostname):
            return loc
    raise Exception('Qsubmit not configured to use at %s' % hostname)


def run_script(args):
    # determine location or use engine override
    if args.engine:
        engine = ENGINES[args.engine]
    else:
        location = args.location or detect_location()
        engine = ENGINES[LOCATIONS[location]['engine']]

    # create a script tempfile
    script_tmpfile = NamedTemporaryFile(suffix='.bash', prefix='.qsubmit-', dir=os.getcwd(), delete=False)

    # create script text
    script_text = SCRIPT_TEMPLATE
    for var_name, value in engine['script'].items():
        script_text = script_text.replace('<' + var_name.upper() + '>', value)
    script_text = script_text.replace('<SCRIPT_TMPFILE>', script_tmpfile.name)
    main_cmd = " ".join(args.command)
    script_text = script_text.replace('<MAIN_CMD>', main_cmd)
    script_text = script_text.replace('<MAIN_CMD_ESC>', main_cmd.replace("'", "'\"'\"'"))

    # print it into a tempfile and close it
    script_tmpfile.write(script_text)
    script_tmpfile.close()

    # get the engine params (replace job name + logdir in the main command)
    run_cmd = engine['submit_cmd'].replace('<NAME>', args.name or 'qsubmit')
    run_cmd = run_cmd.replace('<LOGDIR>', (args.logdir or '.') + '/')
    run_cmd = run_cmd.split(' ')  # TODO use something more intelligent than "split(' ')"
    for param in engine['params']:
        val = vars(args).get(param)
        if val:
            if not isinstance(val, list):  # multiple values: repeat the parameter
                val = [val]
            for val_ in val:
                arg = engine['params'][param].replace('<' + param.upper() + '>', str(val_))
                # replace any secondary parameters tied to this one
                # e.g. GPU memory for # GPUs
                for m in reversed(list(re.finditer('<([A-Z_]+)>', arg))): 
                    secondary_param = m.group(1).lower()
                    secondary_val = vars(args).get(secondary_param)
                    if secondary_val:
                        arg = arg[:m.start()] + secondary_val + arg[m.end():]
                run_cmd.extend(arg.split(' '))
    if 'script_prepend' in engine:
        run_cmd.append(engine['script_prepend'])
    run_cmd.append(script_tmpfile.name)
    # print the final command for clarity
    print >> sys.stderr, 'Qsubmit command:\n', ' '.join([('"%s"' % tok if ' ' in tok else tok)
                                                         for tok in run_cmd])
    # run the command
    # TODO read output and get the id of the process
    subprocess.call(run_cmd)


if __name__ == '__main__':
    ap = ArgumentParser(description='Batch engine script submission wrapper')
    ap.add_argument('--location', help='Override location detection')
    ap.add_argument('--engine', help='Use the given batch engine (instead of location default)')
    ap.add_argument('-n', '--name', '--jobname', help='Job name', default='qsubmit')
    ap.add_argument('-q', '--queue', help='Name of the queue to send the command to')
    ap.add_argument('-c', '--cpus', '--cores', help='Number of CPU cores to use', type=int, default=1)
    ap.add_argument('-g', '--gpus', help='Number of GPUs to use', type=int, default=0)
    ap.add_argument('-M', '--gpu-mem', help='Amount of GPU memory to use', default='1g')
    ap.add_argument('-m', '--mem', help='Amount of memory to use', default='1g')
    ap.add_argument('-l', '--logdir', help='Directory where the log file will be stored')
    ap.add_argument('-w', '--hold', '--wait', help='Hold until jobs with the given IDs are completed',
                    nargs='*', default=[], type=int)
    ap.add_argument('command', nargs='+', help='The arguments for the command to be run')

    args=ap.parse_args()
    run_script(args)
